import { readFileSync, readdirSync } from 'fs';
import { resolve as pathResolve, dirname } from 'path';

/**
 * ESBuild plugin to handle import.meta.glob for SVG files and ?raw imports
 * This replaces Vite's import.meta.glob functionality for production builds
 */
export const globSvgPlugin = () => ({
  name: 'glob-svg',
  setup(build) {
    // Handle ?raw imports for SVG files
    build.onResolve({ filter: /\.svg\?raw$/ }, (args) => {
      console.log('Resolving SVG raw import:', args.path);
      const pathWithoutQuery = args.path.replace('?raw', '');
      const resolvedPath = pathResolve(args.resolveDir, pathWithoutQuery);
      console.log('Resolved path:', resolvedPath);
      return {
        path: resolvedPath,
        namespace: 'svg-raw',
      };
    });

    // Load SVG files as raw strings
    build.onLoad({ filter: /.*/, namespace: 'svg-raw' }, (args) => {
      console.log('Loading SVG raw file:', args.path);
      try {
        const content = readFileSync(args.path, 'utf8');
        console.log('Successfully loaded SVG content, length:', content.length);
        return {
          contents: `export default ${JSON.stringify(content)};`,
          loader: 'js',
        };
      } catch (err) {
        console.warn(`Could not load SVG file: ${args.path}`, err.message);
        return {
          contents: 'export default "";',
          loader: 'js',
        };
      }
    });

    // Handle the icons.ts file specifically
    build.onLoad({ filter: /icons\.ts$/ }, async (args) => {
      try {
        // Read the original file
        const source = readFileSync(args.path, 'utf8');

        // Check if this file contains import.meta.glob
        if (!source.includes('import.meta.glob')) {
          return null; // Let esbuild handle it normally
        }

        // Define the icon directories relative to the icons.ts file
        const iconsDir = pathResolve(dirname(args.path), 'icons');
        const functionalDir = pathResolve(dirname(args.path), 'functional');
        const distinctiveDir = pathResolve(dirname(args.path), 'distinctive');

        // Helper function to read SVG files from a directory
        const readSvgFiles = (dirPath) => {
          try {
            const files = readdirSync(dirPath).filter((f) =>
              f.endsWith('.svg'),
            );
            return files.reduce((acc, file) => {
              const key = file.replace('.svg', '');
              const content = readFileSync(pathResolve(dirPath, file), 'utf8');
              acc[key] = content;
              return acc;
            }, {});
          } catch (err) {
            console.warn(`Could not read directory: ${dirPath}`);
            return {};
          }
        };

        // Read all SVG files
        const iconsObj = readSvgFiles(iconsDir);
        const functionalObj = readSvgFiles(functionalDir);
        const distinctiveObj = readSvgFiles(distinctiveDir);

        // Generate the replacement code
        const replacementCode = `/** eslint-disable spaced-comment */
// This file is generated by esbuild-plugin-glob-svg for production builds
// The original file uses Vite's import.meta.glob for development

const formatIcons = (imports) =>
  Object.entries(imports).reduce<Record<string, string>>(
    (acc, [path, content]) => {
      const key = path
        .replace(/\\.\\/\\(icons|functional|distinctive\\)\\//, '')
        .replace('.svg', '');
      return { ...acc, [key]: content as string };
    },
    {},
  );

export const icons = ${JSON.stringify(iconsObj, null, 2)};
export const functionalIcons = ${JSON.stringify(functionalObj, null, 2)};
export const distinctiveIcons = ${JSON.stringify(distinctiveObj, null, 2)};

export const iconKeys = ${JSON.stringify(Object.keys(iconsObj))} as (keyof typeof icons)[];
export const functionalIconKeys = ${JSON.stringify(Object.keys(functionalObj))} as (keyof typeof functionalIcons)[];
export const distinctiveIconKeys = ${JSON.stringify(Object.keys(distinctiveObj))} as (keyof typeof distinctiveIcons)[];

export type IconName = ${
          Object.keys(iconsObj)
            .map((k) => `"${k}"`)
            .join(' | ') || 'string'
        };
export type FunctionalIconName = ${
          Object.keys(functionalObj)
            .map((k) => `"${k}"`)
            .join(' | ') || 'string'
        };
export type DistinctiveIconName = ${
          Object.keys(distinctiveObj)
            .map((k) => `"${k}"`)
            .join(' | ') || 'string'
        };

export default icons;
`;

        return {
          contents: replacementCode,
          loader: 'ts',
          resolveDir: dirname(args.path),
        };
      } catch (err) {
        console.warn(
          'Could not process icons.ts with glob-svg plugin:',
          err.message,
        );
        return null; // Let esbuild handle it normally
      }
    });
  },
});
